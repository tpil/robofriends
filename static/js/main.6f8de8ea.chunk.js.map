{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbH,SAACC,GAAS,IACXC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BH,EAA1B,cACxB,6BACI,4BAAKF,GACL,2BAAIC,MCmBLK,EA1BC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAMd,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAElB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EACPR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCCrBW,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAE5B,OACI,6BACI,2BACIC,KAAK,SACLZ,UAAU,mCACVa,YAAY,gBACZC,SAAUH,MCFXI,EARA,SAACnB,GACZ,OACI,yBAAKI,UAAU,QAAQgB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC/EvB,EAAMwB,WCiBJC,E,kDAlBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAM,CACPC,UAAW,GAHD,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKxB,OAAGG,KAAKJ,MAAMC,SAAkB,2DACzBG,KAAK9B,MAAMwB,a,GAhBEQ,aC0DbC,G,wDAlDX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACjB,YAAYqB,EAAMC,OAAOC,SAlBxC,EAAKX,MAAM,CACPlB,OAAQ,GACRM,YAAa,IAJR,E,gEAQO,IAAD,OAEfwB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAOkC,S,+BAWpC,IAAD,EACyBZ,KAAKJ,MAA3BlB,EADH,EACGA,OAAOM,EADV,EACUA,YACR6B,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,oBAAoBC,SAASjC,EAAYgC,wBAI/D,OAAsB,IAAlBtC,EAAOwC,OACA,2CAGH,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQmC,W,GAxC5BM,IAAMjB,YCGJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.6f8de8ea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =(props)=>{\r\n    const {name,email,id} = props;\r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='Robot-pic' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\nconst CardList =({robots}) =>{\r\n    /*This will use our custom ErrorBoundary component\r\n    if(true){\r\n        throw new Error('This is some error');\r\n    }\r\n    */\r\n    return(\r\n        <div>\r\n         {\r\n                robots.map((user, i) =>{\r\n                //return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n                return (\r\n                    <Card key={i} \r\n                        id={user.id} \r\n                        name={user.name} \r\n                        email={user.email} \r\n                        />\r\n                    );\r\n                    \r\n                  })\r\n        }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n//we can deconstruct props inside arrow function so we don't use props.searchChange\r\n//onChange is an html event in form elements\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\r\n    return(\r\n        <div >\r\n            <input \r\n                type='search' \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                placeholder='search robots'\r\n                onChange={searchChange} \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div className='p6 tc' style={{overflowY:'scroll', border:'3px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Scroll;\r\n\r\n/*React includes\r\n    props,chlidren,state\r\n    we use props.children when we want to return the content that is wrapped in our component\r\n\r\n    we can also write css inside JSX\r\n*/\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    //We'll need the props\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError : false\r\n        }\r\n    }\r\n    //similar to try catch in JS\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n\r\n    render(){\r\n        if(this.state.hasError)  return <h1>Ooops. There is some error!</h1>\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport {robots} from '../robots';  //we need to destruct cause I didn't export default\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();//we need super to write about state\r\n        this.state={\r\n            robots: [],\r\n            searchfield :''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots:users}));\r\n    }\r\n\r\n    /*we create a trigger function for searchbox. We will pass it as argument from the app component\r\n    The trigger function MUST be EQUAL TO AND ARROW FUNCTION because when we pass the function as argument \r\n    this.setState() can't be used in the searchBox functional component and gets error*/\r\n    onSearchChange = (event) =>{\r\n        //console.log(event.target.value); event.target.value is the way to get the value of the object\r\n        this.setState({searchfield:event.target.value});\r\n      \r\n    }\r\n    render(){\r\n        const {robots,searchfield} = this.state; //we deconstruct this.state so we don't need to use it\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n\r\n        });\r\n        //console.log(filteredRobots);\r\n        if (robots.length === 0){\r\n            return <h1>Loading ...</h1>\r\n        }else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robo Friends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n   \r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*\r\n--------Guide---------\r\n1. we create smaller components first whhich we will use too frequently (Card)\r\n2.We put them in a list container CardList\r\n3.we Created the search input component to filter them\r\n//We use class components to pass props/states between 2 components through the parent Component \r\n4. we create the class App component to communicate the 2 components\r\n5.We created the states and the event function to pass properties\r\n6. we change the state of searchfiled in the event function\r\n7.we pass the result as parametres to the components\r\n8. We used react lifecycle methods to fetch() (it's a window.fetch() method which come to all browsers) \r\n    some predefined users from a page (API). Convert to JSON file and setState robots with the new array. \r\n    Removed the robots.js array.\r\n9. We created a <Scroll /> to wrap the cardlist in so we can see search bar all the time. \r\n10. Clean up code and ile organize  \r\n11. npm build or npm run build\r\n12. Implement Errorboundaries (handle React errors and display them in a better way)\r\n*/\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}